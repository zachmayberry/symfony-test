<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use FOS\RestBundle\Request\ParamFetcherInterface;

/**
 * ActivityRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends EntityRepository
{
    public function findAllQueryBuilder(ParamFetcherInterface $paramFetcher, User $user)
    {
        $qb = $this->createQueryBuilder('activity');
        $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();

        // hide non-public therapies
        if (!$user || (!$user->hasRole('ROLE_DOCTOR') && !$user->hasRole('ROLE_ADMIN'))) {

            // join therapy
            $qb->leftJoin('activity.therapy', 'therapy');

            // and fetch only activities with either no or a public therapy
            $qb->where($qb->expr()->orX(
                $qb->expr()->isNull('activity.therapy'),
                $qb->expr()->eq('therapy.public', ':isPublic')
            ));
            $qb->setParameter("isPublic", 1);
        }

        // hide item with future publish date
        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->isNull('activity.publishedAt'),
            $qb->expr()->lte('activity.publishedAt', ':now')
        ));
        $qb->setParameter("now", new \DateTime());

        // add filters
        foreach($filters as $key => $filter) {

            // disable public field for non admins/doctors
            if ($key === 'public' && (!$user || (!$user->hasRole('ROLE_DOCTOR') && !$user->hasRole('ROLE_ADMIN')))) {
                continue;
            }

            $qb->andWhere("activity.$key = :$key")
                ->setParameter($key, $filter);
        }

        // Order by publishedAt by default
        $qb->orderBy('activity.publishedAt', 'DESC');

        return $qb;
    }
}
