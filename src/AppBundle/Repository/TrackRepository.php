<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Track;
use Doctrine\ORM\EntityRepository;
use FOS\RestBundle\Request\ParamFetcherInterface;

/**
 * TrackRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class TrackRepository extends EntityRepository
{
    public function findAllQueryBuilder(ParamFetcherInterface $paramFetcher)
    {
        $qb = $this->createQueryBuilder('track');

        // FILTER
        $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();
        foreach($filters as $key => $filter) {

            if (strrpos($key, 'IsIn') > 0) {
                $keyName = substr($key, 0, strlen($key) - 4);
                $arrayValues = explode(',', $filter);
                $qb->andWhere($qb->expr()->in("track.$keyName", ":$key"))
                    ->setParameter($key, $arrayValues);
            }
            else {
                $qb->andWhere("track.$key = :$key")
                    ->setParameter($key, $filter);
            }
        }

        // ORDER BY
        $orderBy = !is_null($paramFetcher->get('order_by')) ? $paramFetcher->get('order_by') : array();
        foreach ($orderBy as $sort => $order) {
            $qb->addOrderBy("track.$sort", $order);
        }

        return $qb;
    }

    public function findOldestBinauralTrackWithoutFile()
    {
        $qb = $this->createQueryBuilder('track');
        $qb->where('track.type = :type');
        $qb->setParameter('type', Track::TYPE_TONE);
        $qb->andWhere('track.compileStatus != :compileStatus');
        $qb->setParameter('compileStatus', Track::STATUS_COMPILED);
        $qb->andWhere('track.compileStatus != :compileStatus2');
        $qb->setParameter('compileStatus2', Track::STATUS_COMPILING);
        $qb->orderBy('track.updatedAt', 'ASC');
        $qb->setMaxResults(1);

        return $qb->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Find all tracks of type tone
     *
     * @return array
     */
    public function findTones()
    {
        $qb = $this->createQueryBuilder('track');
        $qb->where('track.type = :type');
        $qb->setParameter('type', Track::TYPE_TONE);

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * Find all tracks of type music or environment
     *
     * @return array
     */
    public function findAudio()
    {
        $qb = $this->createQueryBuilder('track');
        $qb->where('track.type = :type');
        $qb->setParameter('type', Track::TYPE_ENVIRO);
        $qb->orWhere('track.type = :type2');
        $qb->setParameter('type2', Track::TYPE_MUSIC);

        return $qb->getQuery()
            ->getResult();
    }
}
