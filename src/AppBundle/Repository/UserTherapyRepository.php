<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use AppBundle\Entity\UserTherapy;
use Doctrine\ORM\EntityRepository;
use FOS\RestBundle\Request\ParamFetcherInterface;

/**
 * UserTherapyRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class UserTherapyRepository extends EntityRepository
{
    public function findAllQueryBuilder(ParamFetcherInterface $paramFetcher)
    {
        $qb = $this->createQueryBuilder('user_therapy');
        /*$qb = $this->_em->createQueryBuilder();
        $qb->select('DISTINCT user_therapy')
            ->from('AppBundle:UserTherapy', 'user_therapy')
            ->innerJoin('user_therapy.sessions', 'therapy_session'); // join with sessions to get startDate and endDate
*/
        // FILTER
        $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();
        foreach($filters as $key => $filter) {

          if (strrpos($key, 'IsIn') > 0) {
            $keyName = substr($key, 0, strlen($key) - 4);
            $arrayValues = explode(',', $filter);
            $qb->andWhere($qb->expr()->in("user_therapy.$keyName", ":$key"))
              ->setParameter($key, $arrayValues);
          }
          else {
            $qb->andWhere("user_therapy.$key = :$key")
              ->setParameter($key, $filter);
          }
/*
            // get range if from or to is set
            if ($key == 'from') {
                $qb->andWhere("therapy_session.endDate >= :$key")
                    ->setParameter($key, $filter);
            }
            else if ($key == 'till') {

                // add one day to get the till date included in results
                $tillDate = new \DateTime($filter);
                $tillDate->add(new \DateInterval('P1D'));
                $filter = $tillDate->format('Y-m-d');

                $qb->andWhere("therapy_session.startDate <= :$key")
                    ->setParameter($key, $filter);
            }
            else {
                $qb->andWhere("user_therapy.$key = :$key")
                    ->setParameter($key, $filter);
            }*/
        }

        // ORDER BY
        $orderBy = !is_null($paramFetcher->get('order_by')) ? $paramFetcher->get('order_by') : array();
        foreach ($orderBy as $sort => $order) {
            $qb->addOrderBy("user_therapy.$sort", $order);
        }

        return $qb;
    }

    public function findAllPending(User $user = null)
    {
        $qb = $this->createQueryBuilder('user_therapy');
        $qb->where('user_therapy.status = :status');
        $qb->setParameter('status', UserTherapy::STATUS_PENDING);

        if ($user) {
            $qb->andWhere('user_therapy.user = :user');
            $qb->setParameter('user', $user);
        }

        return $qb->getQuery()->getResult();
    }
}
